@model List<front.Models.UserXUserViewModel>
@using Auth.Entities

@{
    ViewData["Title"] = "Index";
    var registerUserModel = new front.Models.RegisterUserViewModel();     
    var atualiza = new AtualizaOutroUserModel();
    var associa = new AssociaRolesModel();
}

    

<h1>Index</h1>


<div class="card-body pt-4 p-3 mb-3">
    <div class="p-3 shadow">
        <div class="row">
            

            <div class="col-md-6">
            <!-- Coluna da Lista de Usuários -->
            <partial name="_UserxUserPartial" model="Model"/>       
            </div>
                     

            <!-- Coluna do Formulário -->
            <div class="col-md-3">
                <partial name="_RegisterUserPartial" model="registerUserModel" />
            </div>

            <!-- Coluna do Associa  -->
            <div class="col-md-3" id="stickytypeheader">
                <div class="card p-3 shadow associarolesclass">                    
                    <partial name="_AssociaRolesPartial" model="associa" />
                </div>
             </div>



        </div>
    </div>
</div>

@section Scripts {
       @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        function MostraMsgsuccess() {
            var mensagemSucesso = '@TempData["Sucesso"]';
            if (mensagemSucesso !== '') {
                showSuccessNotification(mensagemSucesso);               
            }
        }

        $(document).ready(function () {
            MostraMsgsuccess();
        });


        function AssociaRoles() {
            var formData = $("#AssociaRolesform").serialize();

            $.ajax({
                url: '@Url.Action("associaRoles", "UserxUser")',
                type: 'POST',
                data: formData,
                success: function (result) {
                    if (result.success === false) {
                        showErrorNotification("Erro ao Associar função!");
                        $('.associarolesclass').html(result.html);
                    } else {
                        refreshUserList()
                            .then(function () {
                                showSuccessNotification('Usuário Atualizado com sucesso');
                                // tem que remover o modal quando da um refresh list ele pega alguma referencia
                                $('#myModal').remove();
                            })
                            .catch(function (error) {
                                showErrorNotification('Error ao Atualizar Usuário');
                            });
                    }
                },
                error: function (xhr, status, error) {
                    //console.error('Erro na requisição:', status, error);
                    showErrorNotification('Erro na requisição');
                }
            });
        }

        function removerRolesUser() {
            var formData = $("#AssociaRolesform").serialize();

            $.ajax({
                url: '@Url.Action("removerRolesUser", "UserxUser")',
                type: 'POST',
                data: formData,
                success: function (result) {
                    if (result.success === false) {
                        showErrorNotification("Erro Remover função!");
                        $('.associarolesclass').html(result.html);
                    } else {
                        refreshUserList()
                            .then(function () {
                                showSuccessNotification('Função removodida');
                                // tem que remover o modal quando da um refresh list ele pega alguma referencia
                                $('#myModal').remove();
                            })
                            .catch(function (error) {
                                showErrorNotification('Error ao remvoer função');
                            });
                    }
                },
                error: function (xhr, status, error) {
                    //console.error('Erro na requisição:', status, error);
                    showErrorNotification('Erro na requisição');
                }
            });
        }

        $(function () {
            var stickyHeaderTop = $('#stickytypeheader').offset().top;

            $(window).scroll(function () {
                if ($(window).scrollTop() > stickyHeaderTop) {
                    $('#stickytypeheader').css({ position: 'fixed', top: '0px', right: '0px' });
                } else {
                    $('#stickytypeheader').css({ position: 'static', top: '0px', right: 'auto' });
                }
            });
        });

    </script>
    
}


